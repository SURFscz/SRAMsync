"""
This type stub file was generated by pyright.
"""

import os
import sys
import atexit
import traceback
import _ldap
import threading
from ldap.pkginfo import __author__, __license__, __version__
from _ldap import *
from ldap.functions import escape_str, get_option, initialize, set_option, strf_secs, strp_secs
from ldap.ldapobject import LDAPBytesWarning, NO_UNIQUE_ENTRY
from ldap.dn import dn2str, explode_dn, explode_rdn, str2dn

"""
ldap - base module

See https://www.python-ldap.org/ for details.
"""
if __debug__:
  _trace_level = ...
  _trace_file = ...
  _trace_stack_limit = ...
else:
  _trace_level = ...
  _trace_file = ...
  _trace_stack_limit = ...
LIBLDAP_API_INFO = ...
OPT_NAMES_DICT = ...
class DummyLock:
  """Define dummy class with methods compatible to threading.Lock"""
  def __init__(self) -> None:
    ...
  
  def acquire(self): # -> None:
    ...
  
  def release(self): # -> None:
    ...
  


class LDAPLock:
  """
  Mainly a wrapper class to log all locking events.
  Note that this cumbersome approach with _lock attribute was taken
  since threading.Lock is not suitable for sub-classing.
  """
  _min_trace_level = ...
  def __init__(self, lock_class=..., desc=...) -> None:
    """
    lock_class
        Class compatible to threading.Lock
    desc
        Description shown in debug log messages
    """
    ...
  
  def acquire(self): # -> bool | None:
    ...
  
  def release(self): # -> None:
    ...
  


_ldap_module_lock = ...
OPT_DIAGNOSTIC_MESSAGE = ...
